# -- Retrive the total no of orders placed

select * from orders;
SELECT COUNT(*) AS total_orders
FROM orders;

# -- Calculate the total revenue generated from pizza sales.


SELECT SUM(orders_details.quantity * pizzas.price) AS total_sales
FROM orders_details
JOIN pizzas ON pizzas.pizza_id = orders_details.pizza_id;


# -- Identify the highest-priced pizza.

SELECT pizza_types.name, pizzas.price
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

# -- Identify the most common pizza size ordered.


select pizzas.size, count(orders_details.order_details_id) as order_count
from pizzas join orders_details
on pizzas.pizza_id = orders_details.pizza_id
group by pizzas.size order by order_count desc;


# -- List the top 5 most ordered pizza types along with their quantities.

SELECT pizza_types.name,
sum(orders_details.quantity) as quantity
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join orders_details
on orders_details.pizza_id = pizzas.pizza_id
group by pizza_types.name order by quantity desc limit 5;


# -- Join the necessary tables to find the total quantity of each pizza category ordered.


SELECT pizza_types.category,
       SUM(orders_details.quantity) AS total_quantity
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY total_quantity DESC;


# -- Determine the distribution of orders by hour of the day.


SELECT HOUR(order_time) AS hour_of_day, 
       COUNT(order_id) AS order_count
FROM orders
GROUP BY hour_of_day
ORDER BY hour_of_day;

# -- Join relevant tables to find the category-wise distribution of pizzas.

select category , count(name) from pizza_types
group by category


# -- Group the orders by date and calculate the average number of pizzas ordered per day.


SELECT 
ROUND(AVG(order_quantity.total_quantity),0) AS avg_pizzas_ordered_per_day
FROM (
    SELECT orders.order_date, SUM(orders_details.quantity) AS total_quantity
    FROM orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY orders.order_date
) AS order_quantity;


# -- Determine the top 3 most ordered pizza types based on revenue.



SELECT pizza_types.name,
       SUM(orders_details.quantity * pizzas.price) AS revenue
FROM pizza_types
JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;


# -- Calculate the percentage contribution of each pizza type to total revenue.


SELECT pizza_type,
       ROUND(revenue, 2) AS rounded_revenue,
       ROUND((revenue / total_revenue) * 100, 2) AS rounded_percentage_contribution
FROM (
    SELECT pizza_types.name AS pizza_type,
           SUM(orders_details.quantity * pizzas.price) AS revenue
    FROM pizza_types
    JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
    JOIN orders_details ON orders_details.pizza_id = pizzas.pizza_id
    GROUP BY pizza_types.name
) AS subquery
CROSS JOIN (
    SELECT SUM(orders_details.quantity * pizzas.price) AS total_revenue
    FROM orders_details
    JOIN pizzas ON orders_details.pizza_id = pizzas.pizza_id
) AS total_revenue
ORDER BY revenue DESC
LIMIT 3;


# -- Analyze the cumulative revenue generated over time.

SELECT order_date,
       SUM(revenue) OVER (ORDER BY order_date) AS cumulative_revenue
FROM (
    SELECT DATE(orders.order_date) AS order_date,
           SUM(orders_details.quantity * pizzas.price) AS revenue
    FROM orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    JOIN pizzas ON orders_details.pizza_id = pizzas.pizza_id
    GROUP BY DATE(orders.order_date)
) AS revenue_per_day;



# -- Determine the top 3 most ordered pizza types based on revenue for each pizza category.


WITH RankedPizzaTypes AS (
    SELECT pizza_types.category,
           pizza_types.name AS pizza_type,
           SUM(orders_details.quantity * pizzas.price) AS revenue,
           ROW_NUMBER() OVER (PARTITION BY pizza_types.category ORDER BY SUM(orders_details.quantity * pizzas.price) DESC) AS type_rank
    FROM pizza_types
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN orders_details ON pizzas.pizza_id = orders_details.pizza_id
    GROUP BY pizza_types.category, pizza_types.name
)
SELECT category, pizza_type, revenue
FROM RankedPizzaTypes
WHERE type_rank <= 3;


